/**
 * Tap Code Processor7676767676767676767676
 * Author: Monika Burford, Morgan Henderson, Michael Goodrick, Nathaniel Schutt
 *    For your reference...
 * 		event will hold an Event object with the pixels in
 *   	event.detail.data and the timestamp in event.timeStamp
 */

let sequence

_listen = function(event)
{
   
for (i=1; i<=400; i++)
    {
        let result = ""

        result += (event.detail.data[4*i-4] + event.detail.data[4*i-3] + event.detail.data[4*i-2])

        result = result/1200

        if (result >= 100)
            {
                event.flash = true;
            }
        else event.flash = false;
    }

let previous = color, myTimeString, myColorString;

if (event.flash = true);
    {
        if (previous = black);
        {
            let finalTime = event.timeStamp;

            myTimeString += finalTime + " </br> ";

            myColorString += "T" + " </br> ";   
        }

        if (previous = white);
        {
           let color = white;
        }
    }

if( event.flash = false);
    {
        if (previous = white);
        {
            let initialTime = event.timeStamp;

            myTimeString += initialTime + " </br> ";

            myColorString += "G" + " </br> ";
        }

        if (previous = black);
        {
            let color = black;
        }
    }

let timeDif

for (i=1; i < myTimeString.length; i++)
    {
        timeDif += myTimeString(i+1) - myTimeString(i);
    }

Math.min(timeDif) = halfGapLength

let reference = 2*halfGapLength

for (j=1; j < timeDif.length; j++)
    {
        if (myColorString(j) = G); 
        {
            if (timeDif(j) > reference); 
            {
                sequence = fullGap;
            }

            if (timeDif(j) < reference); 
            {
                sequence = halfGap;
            }
        }

        if (myColorString(j) = T); 
        {
            sequence = tap;
        }

    }

};

/**
 * Your header documentation here for clear
 */
clear = function()
{
	// your code here
};

/**
 * Your header documentation here for translate
 */

translate = function()

{

//By using a for loop, we incremented through the entire original array, declaring a new array at each "stop".
    
let myarray= Array(5);

let i;

for (i=0; i<5; i++)
    {
        myarray[i]= Array(5);
    }

        myarray[0][0] = "e";
        myarray[0][1] = "t";
        myarray[0][2] = "a";
        myarray[0][3] = "n";
        myarray[0][4] = "d";

        myarray[1][0] = "o";
        myarray[1][1] = "i";
        myarray[1][2] = "r";
        myarray[1][3] = "u";
        myarray[1][4] = "c";

        myarray[2][0] = "s";
        myarray[2][1] = "h";
        myarray[2][2] = "m";
        myarray[2][3] = "f";
        myarray[2][4] = "p";

        myarray[3][0] = "l";
        myarray[3][1] = "y";
        myarray[3][2] = "g";
        myarray[3][3] = "v";
        myarray[3][4] = "j";

        myarray[4][0] = "w";
        myarray[4][1] = "b";
        myarray[4][2] = "x";
        myarray[4][3] = "q";
        myarray[4][4] = "z";
    
let rx_code;

if (sequence = tap);
    {
        rx_code += "*"
    }

if (sequence = fullGap);
    {
        rx_code += "-"
    }

let x;

let coordinatesString

for (i=1; i<rx_code.length; i++); 
    { 
        if (rx_code(i)=*) 
        {        
            x += 1;
        }
        else 
        {
            coordinatesString += x;
            x=0;
        }
    }


let translatedMessage

for (i=1; i<=coordinatesString.length; i= i+2)
    {
        translatedMessage += myarray[coordinatesString(i)][coordinatesString(i+1)];  
    }
        
let ConvertedOne =translatedMessage.replace ("wuw", " ");

let rx_translated = ConvertedOne.replace ("qc", "k")

// Converting the special characters using a replace function
    
};
